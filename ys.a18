; -------------------------------------------------------------------
; -------------------------------------------------------------------
; *** ys: send one or more files using YMODEM batch protocol
; ***
; *** Build #
; ***  1: Proof of concept version
; ***  2: First bug squashed: 256 & 512 byte files were sent 
; ***     as 0 bytes
; ***  3: Added file timestamp to block 0
; ***  4: Inlined some Tx/Rx code to make it fast enough to
; ***     catch the ACK & CRC/NAK at the end of a block send
; ***  5: Dec/hex oops in "Couldn't open file:" message
; ***  6: missed a "pop rc" when O_READ didn't read any bytes
; ***  7: moved endrom to end of uninitialised data so that
; ***     Elf/OS 0.4.x can tell if we're colliding with the heap.
; ***     Make stack manipulation interrupt safe on entry and
; ***     exit (even though soft UART code is unlikely to work
; ***     if interrupted).
; ***  8: Add UART type detection & auto config. Both hard &
; ***     soft UARTs supported.
; ***  9: Expand directory files on cmd line into their component
; ***     data files for sending (NOT recursive)
; *******************************************************************
; *** This software is released to the public domain.		  ***
; *** You have permission to use, modify, copy, and distribute	  ***
; *** this software as you please.				  ***
; *******************************************************************
;
; Register usage:
;
; System:
;   r0   - Resesrved for DMA
;   r1   - Reserved for interrupts
;   r2   - Stack pointer
;   r3   - Program counter
;   r4   - SCALL program counter
;   r5   - SRET program counter
;   r6   - SCALL return address
;   re.0 - SCALL overwrites with D
;   re.1 - Baud rate constant
;
; Main program :
;
;   ra   - Command line pointer (on exec)
;
; All other registers are available for subroutines.
;
	include	"bios.inc"
	include	"kernel.inc"
;	
debug	equ	0
info	equ	0
;
; ***************************************************
; ***** Constants				*****
; ***************************************************
cr	equ	'M'-'@'
lf	equ	'J'-'@'
bs	equ	'H'-'@'
;
soh	equ	'A'-'@'		; 128 byte packet header
stx	equ	'B'-'@'		; 1K byte packet header
eot	equ	'D'-'@'		; end of file transfer marker
ack	equ	'F'-'@'		; Acknowledge (good packet)
nak	equ	'U'-'@'		; Negative acknowledge (bad packet)
can	equ	'X'-'@'		; cancel transfer
crc	equ	'C'		; use CRC rather than checksum
;
; ***************************************************
; ***** This block is the Execution header for	*****
; ***** a stand-alone program. It begins 6	*****
; *****bytes before the program start.		*****
; ***************************************************
LoadAdr	equ	2000h
	org	LoadAdr-6	; Header starts at 01ffah
	dw	LoadAdr
	dw	EndRom-LoadAdr
	dw	LoadAdr
;
; ***************************************************
; ***** Code start				*****
; ***************************************************
	br	Start
;
; ***************************************************
; ***** Program header				*****
; ***************************************************
	date
Build:	dw	9		; build number
	db	'expand dirs in cmd tail',0
;
monthDays:
	db	31,28,31,30,31,30,31,31,30,31,30,31
;
CmdFilDes:
	db	0,0,0,0		; current file offset
	dw	CmdDta		; DTA
	dw	0		; eof
	db	0		; flags
CmdDirSec:
	db	0,0,0,0		; dir sector
CmdDirOfs:
	dw	0		; dir offset
	db	0,0,0,0		; current sector in DTA
;
SndFilDes:
	db	0,0,0,0		; current file offset
	dw	SndDta		; DTA
	dw	0		; eof
	db	0		; flags
SndDirSec:
	db	0,0,0,0		; dir sector
SndDirOfs:
	dw	0		; dir offset
	db	0,0,0,0		; current sector in DTA
;
; ***************************************************
; ***** Main program				*****
; ***************************************************
start:	
	push	r6		; save Elf/OS's return address on its stack
	ldi     1		; assume interrupts are enabled
	lsie			; skip if they are
	ldi	0		; mark interrupts disabled
	plo	re		; save IE flag
	ldi	023h		; setup for DIS (X=2, P=3)
	str	r2
	dis			; disable interrupts
	dec	r2
	load	rf,saveStack	; save Elf/OS's stack
	ghi	r2
	str	rf
	inc	rf
	glo	r2
	str	rf
	load	r2,localStack	; use our own stack
	glo	re		; recover IE flag
	lbz	start2		; jump if interrupts were disabled
	ldi	023h		; setup for RET (X=2, P=3)
	str	r2
	ret			; re-enable interrupts
	dec	r2
start2:
	ghi	re		; turn off console echo
	ani	11111110b
	phi	re
	call	UARTsetup	; auto detect/config UART
;
	call	NextFileName	; point to first file name
	lbnz	NextFile	; and go send it
	call	O_INMSG		; otherwise display usage message
	db	'Usage:	ys filename [filename...]',cr,lf,0
	lbr	Exit		; and return to os
NextFile:
	call	ProcFile	; process next file (either send or expand)
	call	NextFileName	; point to next file name in cmd tail
	lbnz	NextFile	; loop for next file
	call	WaitNAKorCRC
	load	rf,blknum
	ldi	0
	str	rf
	call	ZeroBlock0	; send zero filled block 0 to finish up
	 if	debug=0
	load	rf,SoftAckedAction
	ldi	low nextBlock
	str	rf
	load	rf,HardAckedAction
	ldi	high nextBlock
	str	rf
	inc	rf
	ldi	low nextBlock
	str	rf
	 endi
	load	rf,block0
	load	rc,128
	ldi	10
	plo	r8
	call	SendBlock
	lbr	Exit		; and return to os
;
; ***************************************************
; ***** NextFilename: advance RA to the next	*****
; ***** non space character			*****
; ***************************************************
NextFileName:
	lda	ra		; move past any spaces
	smi	' '
	lbz	NextFileName
	dec	ra		; move back to non-space character
	ldn	ra		; get byte
	retn
;
; ***************************************************
; ***** Exit: return to Elf/OS, restoring OS	*****
; *****       stack and R6 contents		*****
; ***************************************************
Exit:
	ghi	re		; restore console echo
	ori	00000001b
	phi	re
	ldi     1		; assume interrupts are enabled
	lsie			; skip if they are
	ldi	0		; mark interrupts disabled
	plo	re		; save IE flag
	ldi	023h		; setup for DIS (X=2, P=3)
	str	r2
	dis			; disable interrupts
	dec	r2
	load	rf,saveStack	; restore Elf/OS's stack
	lda	rf
	phi	r2
	ldn	rf
	plo	r2
	glo	re		; recover IE flag
	lbz	Exit2		; jump if interrupts were disabled
	ldi	023h		; setup for RET (X=2, P=3)
	str	r2
	ret			; re-enable interrupts
	dec	r2
Exit2:
	pop	r6		; restore Elf/OS's return address
	retn			; return to Elf/OS
;
; ***************************************************
; ***** Process file: if a directory file,	*****
; ***** send each ordinary file contained in it	*****
; ***** If an ordinary file, just send it  	*****
; ***** RA: points to file name			*****
; ***************************************************
ProcFile:
	load	rd,cmdFilename	; copy filename from cmd tail
	load	rc,sndFilename
ProcCopyName:
	lda	ra		; look for first less <= space
	str	rd
	inc	rd
	str	rc
	inc	rc
	smi	' '+1
	lbdf	ProcCopyName
	dec	ra
	dec	rd
	ldi	0		; zero terminate filename
	str	rd
	inc	rd
	dec	rc
	str	rc
	push	rd		; save block ptr
	load	rd,CmdFilDes	; get file descriptor
	load	rf,cmdFilename
	ldi	0		; flags for open, append
	plo	r7
	call	O_OPEN		; attempt to open file to determine size
	lbnf	CmdFileOpened	; jump if file was opened
	call	Cancel
	call	O_INMSG
	db	'Couldn',27h,'t open file: ',0
	load	rf,cmdFilename
	call	O_MSG		; display it
	call	crlf
	lbr	Exit		; and return to os
CmdFileOpened:
	load	rd,CmdFilDes
;
	push	rf
	ldi	0e0h		; lba mode
	phi	r8
	load	rf,CmdDirSec+1	; point to dir sector in CmdFilDes
	lda	rf		; retrieve sector
	plo	r8
	lda	rf
	phi	r7
	lda	rf
	plo	r7
	load	rf,DirBuffer	; where to load sector
	call	f_ideread	; call bios to read the sector
;
	load	rf,CmdDirOfs+1	; need dirent offset
	ldn	rf
	adi	6		; point to flags
	plo	rd
	dec	rf
	ldn	rf
	adci	0		; propagate carry
	phi	rd		; r7 now points to flags
	glo	rd		; now point to correct spot in sector buffer
	adi	low DirBuffer
	plo	rd
	ghi	rd
	adci	high Dirbuffer
	phi	rd
;
	ldn	rd		; get flags
	pushd
	
	ani	ff_dir
	bnz	isDirFile
;
	load	rd,CmdFilDes
	call	O_CLOSE
	push	ra		; save cmd tail ptr
	load	ra,cmdFilename
	call	SendFile	; ordinary file, just send it
	pop	ra
	retn
isDirFile:
	load	rc,32		; read next directory entry
	load	rf,dirEntBuffer
	load	rd,CmdFilDes
	call	O_READ
	glo	rc
	lbz	eofdir		; no more
	load	rf,dirEntBuffer
	lda	rf		; see if it has a non zero sector
	lbnz	occupied	; (indicates in-use file)
	lda	rf
	lbnz	occupied
	lda	rf
	lbnz	occupied
	lda	rf
	lbz	isDirFile
occupied:
	load	rf,dirEntBuffer+6
	ldn	rf		; make sure it's not a sub directory
	ani	ff_dir
	lbnz	isDirFile
	push	ra		; save cmd tail ptr
	load	rf,cmdFilename
	load	ra,sndFilename
copyDir:
	lda	rf
	str	ra
	inc	ra
	bnz	copyDir
	dec	ra		; point back to terminator
	dec	ra		; point back to last char of dir
	ldn	ra
	smi	'/'
	bz	hasTrailingSlash
	inc	ra
	ldi	'/'
	str	ra
hasTrailingSlash:
	inc	ra
	load	rf,dirEntBuffer+12
copyFileName:
	lda	rf
	str	ra
	inc	ra
	bnz	copyFileName
	load	ra,sndFilename
	call	SendFile	; send file from directory entry
	pop	ra		; restore cmd tail ptr
	lbr	isDirFile
eofdir:
	load	rd,CmdFilDes
	call	O_CLOSE
	retn
;
; ***************************************************
; ***** Send file: send a single file	  	*****
; ***** RA: points to file name			*****
; ***************************************************
SendFile:
	call	ZeroBlock0
	load	rd,block0	; copy filename to block
	ldn	ra		; don't allow leading /
	smi	'/'
	bnz	B0loop1		; jump if not an absolute path
	inc	ra		; make it a relative path
B0loop1:
	lda	ra		; look for first less <= space
	str	rd
	inc	rd
	smi	' '+1
	lbdf	B0loop1
	dec	ra
	dec	rd
	inc	rd		; skip over 0 terminator
	push	rd		; save block ptr
	load	rd,SndFilDes	; get file descriptor
	load	rf,sndFilename
	ldi	O_APPND		; flags for open, append
	plo	r7
	call	O_OPEN		; attempt to open file to determine size
	lbnf	SndFileOpened	; jump if file was opened
	call	Cancel
	call	O_INMSG
	db	'Couldn',27h,'t open file: ',0
	load	rf,sndFilename
	call	O_MSG		; display it
	call	crlf
	lbr	Exit		; and return to os
SndFileOpened:
	load	rd,SndFilDes
	load	rf,fileSize
	lda	rd		; put 32 bit offset into
	phi	r7		; R7:R8 and fileSize
	str	rf
	inc	rf
;
	lda	rd
	plo	r7
	str	rf
	inc	rf
;
	lda	rd
	phi	r8
	str	rf
	inc	rf
;
	ldn	rd
	plo	r8
	str	rf
;
	dec	rd		; restore descriptor
	dec	rd
	dec	rd
;
	push	r7
	push	r8
;
	load	r8,0
	load	r7,0
	load	rd,SndFilDes
	load	rc,0		; rewind file to start
	call	O_SEEK
;
	pop	r8
	pop	r7
	pop	rf		; restore block ptr
	call	uint32_out	; convert number to ascii
	ldi	' '		; finish file size with space	
	str	rf
	inc	rf
;
	push	ra
	push	rf
	ldi	0e0h		; lba mode
	phi	r8
	load	rf,SndDirSec+1	; point to dir sector in SndFilDes
	lda	rf		; retrieve sector
	plo	r8
	lda	rf
	phi	r7
	lda	rf
	plo	r7
	load	rf,DirBuffer	; where to load sector
	call	f_ideread	; call bios to read the sector
;
	load	rf,SndDirOfs+1	; need dirent offset
	ldn	rf
	adi	7		; point to date block
	plo	ra
	dec	rf
	ldn	rf
	adci	0		; propagate carry
	phi	ra		; r7 now points to date block
	glo	ra		; now point to correct spot in sector buffer
	adi	low DirBuffer
	plo	ra
	ghi	ra
	adci	high DirBuffer
	phi	ra
;
	load	rf,year
	lda	ra		; get year/month
	shr			; shift high month bit into DF
	ldn	ra		; get low bits of month
	shrc			; shift high bit in
	shr			; then shift into position
	shr
	shr
	shr
	inc	rf
	str	rf		; store month
	inc	rf		; point to day storage
	ldn	ra		; recover day
	ani	31		; mask for day
	str	rf		; store day
	dec	rf
	dec	rf		; point back to year offset storage
	dec	ra		; point back to year
	lda	ra		; get year
	shr			; shift out high bit of month
	str	rf		; store year offset from 1972
	inc	rf
	inc	rf
	inc	rf		; point to hours storage
	inc	ra		; point to time
	ldn	ra		; retrieve hours
	shr			; shift to proper position
	shr
	shr
	str	rf		; store hours
	inc	rf		; point to minutes storage
	lda	ra		; get minutes
	ani	07h		; strip out hours
	shl			; shift to needed spot
	shl
	shl
	str	r2		; save for combination
	ldn	ra		; get low bits of minutes
	shr			; shift into position
	shr
	shr
	shr
	shr
	or			; combine with high bites
	str	rf		; store minutes
	inc	rf		; point to seconds storage
	ldn	ra		; get seconds
	ani	1fh		; strip minutes out
	shl			; multiply by 2
	str	rf		; store seconds	
;
	load	rf,year		; point back to year
	load	r7,03c2h	; number of seconds
	load	r8,6700h	; from Jan 1 1970 to Jan 1 1972
	ldn	rf		; year offset from 1972
	plo	r9
	ldi	0
	phi	r9		; leap year counter
yearLoop:
	glo	r9
	bz	yearsDone
	load	ra,01e1h	; seconds in a year
	load	rb,3380h
	call	add32bits
	ghi	r9
	ani	00000011b
	bnz	notLeapYear
	load	ra,0001h	; seconds in the leap day
	load	rb,5180h	; (86400)
	call	add32bits
notLeapYear:
	ghi	r9
	dec	r9
	adi	1
	phi	r9
	lbr	yearLoop
yearsDone:
	load	ra,0001h	; seconds in a day
	load	rb,5180h	; (86400)
	lda	rf		; re-get year
	ani	00000011b	; rc.1 will be 0 if leap year
	phi	rc		; 
	lda	rf		; month # (1-12)
	smi	1
	lbz	monthsDone
	plo	rc		; rc.0 is month # -1
	load	rd,monthDays
monthsLoop:
	lda	rd
	plo	r9		; rb.0 is # days in month
monthLoop:
	call	add32bits	; add a day's worth of seconds
	dec	r9		; decrement days left in month
	glo	r9
	lbnz	monthLoop
	ghi	rc		; leap year?
	bnz	noLeapYearChk
	glo	rd		; test for February
	smi	low monthDays+2
	bnz	notFebruary
	call	add32bits	; add in another day in Feb in leap year	
noLeapYearChk:
notFebruary:
	glo	rc
	smi	1
	plo	rc
	lbnz	monthsLoop
monthsDone:
	lda	rf		; day of month
	smi	1
	lbz	domDone
	plo	r9
domLoop:
	call	add32bits
	dec	r9
	glo	r9
	lbnz	domLoop
domDone:
	load	ra,0
	load	rb,3600		; seconds in an hour
	lda	rf
	bz	hoursDone
	plo	r9
hoursLoop:
	call	add32bits
	dec	r9
	glo	r9
	bnz	hoursLoop
hoursDone:
	load	rb,60		; seconds in a minute
	lda	rf
	lbz	minutesDone
	plo	r9
minutesLoop:
	call	add32bits
	dec	r9
	glo	r9
	lbnz	minutesLoop
minutesDone:
	ldn	rf		; get seconds
	plo	rb
	call	add32bits
;
	pop	rf		; restore block 0 ptr
	ldi	'0' shr 2	; convert r7:r8 to octal number
	phi	r9		; and add to block 0 string
	ldi	2		; 2 bits on first digit
	plo	r9
	ldi	11		; 11 digits in a 32 bit number
	plo	ra
bitLoop:
	glo	r8
	shl
	plo	r8
	ghi	r8
	shlc
	phi	r8
	glo	r7
	shlc
	plo	r7
	ghi	r7
	shlc
	phi	r7
	ghi	r9
	shlc
	dec	r9
	phi	r9
	glo	r9
	lbnz	bitLoop
	ghi	r9
	str	rf
	inc	rf
	ldi	'0' shr 3	; next octal digit setup
	phi	r9
	ldi	3		; 3 bits for remaining digits
	plo	r9
	dec	ra
	glo	ra
	lbnz	bitLoop
;
	pop	ra
;
	ldi	' '		; finish timestamp with space	
	str	rf
	inc	rf
	ldi	'0'		; default file mode to '0'
	str	rf		; no trailing nul needed: already 0'd
;
	call	WaitNAKorCRC
	smi	crc
	lbz	CrcMode
	smi	nak-crc
	lbz	SaveMode
SendFileError:
	load	rd,SndFilDes
	call	O_CLOSE
	smi	0		; DF=1, error
	retn
CrcMode:
	ldi	1
SaveMode:
	plo	r7
	load	rf,blkMode
	glo	r7
	str	rf
;
	 if	debug=0
	load	rf,SoftAckedAction
	ldi	low SoftReadne2
	str	rf
	load	rf,HardAckedAction
	ldi	high HardAcked
	str	rf
	inc	rf
	ldi	low HardAcked
	str	rf
	 endi
	load	rf,blkNum
	ldi	0
	str	rf
	load	rf,block0
	load	rc,128
	ldi	10
	plo	r8
	call	SendBlock	; send file block 0
	lbdf	SendFileError
;
	 if	debug
	pushd
	call	crlf
	load	rf,hexcount
	ldi	0
	str	rf
	popd
	 endif
;
	smi	crc
	bz	fileSendLoop
	smi	nak-crc
	bnz	SendFileError
;
FileSendLoop:
	load	rf,fileSize
	load	rc,1024		; assume we've got at least 1K
	lda	rf		; left to send
	lbnz	MoreToGo
	lda	rf
	lbnz	MoreToGo
	ldn	rf
	smi	high 1024
	lbdf	MoreToGo	; jump if >= 1K left to go
NearingTheEnd:
	load	rc,128		; switch to 128 byte sectors
	lda	rf
	lbnz	MoreToGo
	ldn	rf
	lbz	FileDone
MoreToGo:
	push	rc
	load	rd,SndFilDes
	load	rf,blockBuffer
	call	O_READ
	glo	rc
	lbnz	ReadBytes
	ghi	rc
	lbz	FileDonePop
ReadBytes:
	load	rf,fileSize+3	; LSB
;
	glo	rc		; decrement fileSize by
	str	r2		; # bytes read
	ldn	rf
	sm
	str	rf
;
	dec	rf
	ghi	rc
	str	r2
	ldn	rf
	smb
	str	rf
;
	dec	rf
	ldn	rf
	sdbi	0
	str	rf
;
	dec	rf
	ldn	rf
	sdbi	0
	str	rf
;
	pop	rc		; retrieve block size
	 if	debug=0
	load	rf,SoftAckedAction
	ldi	low nextBlock
	str	rf
	load	rf,HardAckedAction
	ldi	high nextBlock
	str	rf
	inc	rf
	ldi	low nextBlock
	str	rf
	 endi
	load	rf,blockBuffer
	ldi	10
	plo	r8
	call	SendBlock
	lbdf	SendFileError
	smi	ack
	bz	BlockACKed
	call	Cancel
	lbr	SendFileError
BlockACKed:
	lbr	fileSendLoop
FileDonePop:
	pop	rc		; discard block size
FileDone:
	call	SendEOT		; signal file done and get response
	smi	ack		; ACK'd?
	lbnz	SendFileError
	load	rd,SndFilDes
	call	O_CLOSE
	adi	0		; DF=0, no error
	retn			; all done!
;
; ***************************************************
; ***** ZeroBlock0: zeroes block 0		*****
; ***************************************************
ZeroBlock0:
	load	rf,block0
ZeroLoop:
	ldi	0
	str	rf
	inc	rf
	glo	rf
	smi	low (block0+128)
	lbnz	ZeroLoop
	retn
;
; ***************************************************
; ***** Cancel: send 8 CANs followed by 8 BSs	*****
; ***************************************************
Cancel:
	push	r7
	ldi	8
	plo	r7
cancelLoop:
	ldi	can
	call	TTYout		; send CAN (^X) 8 times
	dec	r7
	glo	r7
	lbnz	cancelLoop
	ldi	8
	plo	r7
bsLoop:
	ldi	bs		; send BS (^H) 8 times
	call	TTYout
	dec	r7
	glo	r7
	lbnz	bsLoop
	pop	r7
	retn
;
; ***************************************************
; ***** WaitNAKorCRC: wait for CRC or NAK char	*****
; ***************************************************
WaitNAKorCRC:
	 if	debug
	ldi	crc
	 else	
	call	f_read
	plo	re
	smi	crc
	bz	GotNAKorCRC
	smi	nak-crc
	bnz	WaitNAKorCRC
GotNAKorCRC:
	glo	re
	 endi
	retn
;
; ***************************************************
; ***** GetACK: wait for ACK/NAK or CAN	char	*****
; ***************************************************
GetACK:
	 if	debug
	ldi	ack
	 else
	call	f_read		; read response to block sent
	 endi
	plo	re
	smi	ack
	lbz	GotACK		; ACK'd, all good
	smi	nak-ack
	lbz	DidntGetACK	; NAK'd, probably have to resend
	smi	can-nak
	lbz	DidntGetACK	; CAN'd, terminating transfer
	lbr	GetACK
GotACK:
	glo	re
	adi	0		; DF = 0, ACKed
	retn
DidntGetACK:
	glo	re
	smi	0		; DF = 1, not ACKed
	retn
;
; ***************************************************
; ***** SendEOT: send EOT, wait for ACK		*****
; ***************************************************
SendEOT:
	ldi	eot
	call	TTYout		; send EOT (^D)
	 if	debug
	call	crlf
	push	rf
	load	rf,hexcount
	ldi	0
	str	rf
	pop	rf
	 else
	call	f_read
	smi	ack		; wait for ACK (^F)
	lbnz	SendEOT
	 endi
	ldi	ack
	retn
;
; *******************************************
; ***** Send file block	  		*****
; ***** RF - pointer to block		*****
; ***** RC - Block length		*****
; ***** R8 - # retries			*****
; *******************************************
ResendBlock:
	pop	rf
	pop	rc
SendBlock:
	push	rc
	push	rf
	ghi	rc		; 1K or 128b block?
	lbz	Send128
	ldi	stx		; 1K
	lbr	SendStart
Send128:
	ldi	soh		; 128b
SendStart:
	call	TTYout		; SOH/STK
	load	rd,blkNum
	ldn	rd
	call	TTYout		; block #
	ldn	rd
	sdi	255
	call	TTYout		; NOT block #
;
	ldi	high crcTableLow
	phi	r9
	ldi	high crcTableHigh
	phi	rb
;
	load	r7,0
	load	rd,blkMode
	ldn	rd		; 0=checksum, 1=CRC
	lbz	SendWithChecksum
;
SendWithCRC:
	ldn	rf
	call	TTYout		; send data byte
	lda	rf		; retrieve again and advance ptr
;
	str	r2
	ghi	r7		; j = (crc >> 8) ^ byte
	xor
	plo	r9
	plo	rb
;
	glo	r7		; crc = (crc << 8) ^ table[j]
	sex	rb
	xor
	sex	r2
	phi	r7
	ldn	r9
	plo	r7
;
	dec	rc		; loop while data bytes
	ghi	rc		; left to send
	lbnz	SendWithCRC
	glo	rc
	lbnz	SendWithCRC
;
	ghi	r7		; send hi byte of CRC
	call	TTYout
HardUARTlbr1	equ	$+1
	lbr	SoftUARTlastChar
;
SendWithChecksum:
	lda	rf
	str	r2
	glo	r7
	add
	plo	r7
	ldn	r2
	call	TTYout		; send data byte
	dec	rc
	ghi	rc
	lbnz	SendWithChecksum
	glo	rc
	lbnz	SendWithChecksum
HardUARTlbr2	equ	$+1
	lbr	SoftUARTlastChar
;
; With a physical UART, we've got no worries about missing the ACK
; after sending the last character of the block, even after block 0
; when we have to handle 2 characters (the ACK/NAK then the CRC/NAK
; character).
;
HardUARTlastChar:
	glo	r7
	call	TTYout		; send checksum or low byte of CRC
	CALL	GetACK
HardAckedAction	equ	$+1
	lbnf	HardAcked	; block ACK'd
	smi	nak
	lbnz	SendBlockError
	dec	r8		; block NAK'd
	glo	r8		; resend if any retries left
	lbnz	ResendBlock
	lbr	SendBlockError
HardAcked:
	call	WaitNAKorCRC
	lbr	nextBlock
;
	page
;
; BIOS calls weren't quite fast enough to catch the ACK and CRC/NAK
; at the end of a block 0 send. They did manage just the ACK at the end
; of a normal block, most of the time. So, reluctantly, I've had to
; inline the bit banged UART code. I've got some ideas about auto
; patching this to match the machine configuration, but it's all in
; my head at the moment.
;
SoftUARTlastChar:
	 if debug
	glo	r7
	call	ttyout
	load	rf,blknum
	ldn	rf
	adi	1
	str	rf
	load	rf,hexcount
	ldi	0
	str	rf
	call	O_INMSG
	db	'acked',cr,lf,0
	pop	rf
	pop	rc
	ldi	ack
	adi	0
	retn
	 else
	ldi	9		; 9 bits to send
	plo	rf
	load	rd,delay	; point RD to delay routine
	sep	rd
	sep	rd
	ldi	0
	shr
typelp:	bdf	SoftTxHigh	; jump if 1 bit
SoftTxLow:
	req			; reset output
	br	typect
SoftTxHigh:
	seq			; set output
	br	typect
typect:	sep	rd		; perform bit delay
	sex	r2
	sex	r2
	glo	r7
	shrc
	plo	r7
	dec	rf
	glo	rf
	bnz	typelp
SoftTxStop:
	req			; set stop bits
	sep	rd		; wait half the pulse width
	sep	rd		; wait another half the pulse width
readne:
	ldi	9		; 8 bits to receive
	plo	rf
	ghi	re		; first delay is half bit size
	phi	rf
	shr
	shr
	phi	re
SoftRxStart1:
	bn1	$		; wait for transmission
	sep	rd		; wait half the pulse width
	ghi	rf		; recover baud constant
	phi	re
recvnelp:
	ghi	rf
	shr			; shift right
SoftRxBit1:
	b1	recvnelp0	; jump if zero bi
	ori	128		; set bit
recvnelp1:
	phi	rf
	sep	rd		; perform bit delay
	dec	rf		; decrement bit count
	nop
	nop
	glo	rf		; check for zero
	bnz	recvnelp	; loop if not
recvnedn:
	sep	rd
	ghi	rf		; get character
	plo	re

	smi	ack
SoftAckedAction equ	$+1
	bz	SoftReadne2	; block ACK'd
	smi	nak-ack
	bnz	SendBlockError
	dec	r8		; block NAK'd
	glo	r8		; resend if any retries left
	lbnz	ResendBlock
SendBlockError:
	pop	rf
	pop	rc
	glo	re
	smi	0		; DF = 1, error
	retn
SoftReadne2:
	ldi	9		; 8 bits to receive
	plo	rf
	ghi	re		; first delay is half bit size
	phi	rf
	shr
	shr
	phi	re
SoftRxStart2:
	bn1	$		; wait for transmission
	sep	rd		; wait half the pulse width
	ghi	rf		; recover baud constant
	phi	re
recvne2lp:
	ghi	rf
	shr			; shift right
SoftRxBit2:
	b1	recvne2lp0	; jump if zero bi
	ori	128		; set bit
recvne2lp1:
	phi	rf
	sep	rd		; perform bit delay
	dec	rf		; decrement bit count
	nop
	nop
	glo	rf		; check for zero
	bnz	recvne2lp	; loop if not
recvne2dn:
	ghi	rf		; get character
	plo	re
	smi	crc
	bz	nextBlock
	smi	nak-crc
	bnz	SendBlockError
nextBlock:
	load	rf,blkNum
	ldn	rf
	adi	1
	str	rf
	pop	rf
	pop	rc
	glo	re
	adi	0		; DF = 0, ok
	retn
recvnelp0:
	br	recvnelp1	; equalize between 0 and 1
recvne2lp0:
	br	recvne2lp1	; equalize between 0 and 1
;
delayX:	sep	r3
delay:	ghi	re		; get baud constant
	shr			; remove echo flag
	plo	re		; put into counter
	sex	r2		; waste a cycle
delay1:	dec	re		; decrement counter
	glo	re		; get count
	bz	delayX		; return if zero
	br	delay1		; otherwise keep going
	 endi
;
; ***************************************************
; ***** Start a new line on the terminal	*****
; ***************************************************
crlf:
	call	O_INMSG
	db	cr,lf,0
	retn
;
; ***************************************************
; ***** Convert 32-bit unsigned int to ASCII	*****
; ***** using the double-dabble algorithm	*****
; ***** (AKA shift and add 3)			*****
; ***** R7:R8 - 32-bit integer			*****
; ***** RF - destination buffer	pointer		*****
; ***************************************************
UINT32_DIGITS	EQU	10	; maximum of 10 digits in result
UINT32_BITS	EQU	32	; how many bits did you THINK there'd be???

uint32_out:
	push	rd		; save consumed registers
	push	r9
	push	r8
	push	r7
	load	rd,uint32_buf	; RD is output buffer
itoa1:	
	push	rd		; save buffer pointer
	ldi	UINT32_DIGITS	; clear out BCD buffer
	plo	re
tobcdlp1:
	ldi	0
	str	rd		; store into answer
	inc	rd
	dec	re		; decrement count
	glo	re
	lbnz	tobcdlp1	; loop until done
	pop	rd		; recover buffer pointer
	ldi	UINT32_BITS	; 32 bits to process
	plo	r9
tobcdlp2:
	ldi	UINT32_DIGITS	; process all 10 digits
	plo	re		; for digits >= 5
	push	rd		; save buffer pointer
tobcdlp3:
	ldn	rd		; get byte
	smi	5		; need to see if 5 or greater
	lbnf	tobcdlp3a	; jump if not
	adi	5+3		; add 3 to original number
	str	rd		; and put it back
tobcdlp3a:
	inc	rd		; point to next cell
	dec	re		; decrement cell count
	glo	re		; retrieve count
	lbnz	tobcdlp3	; loop back if not done
	
	glo	r8		; shift 32 bit binary number
	shl			; 1 bit left
	plo	r8
	ghi	r8
	shlc
	phi	r8
	glo	r7
	shlc
	plo	r7
	ghi	r7
	shlc
	phi	r7
	
	shlc			; now shift result to bit 3
	shl
	shl
	shl
	str	rd
	pop	rd		; recover address
	push	rd		; save address again
	ldi	UINT32_DIGITS	; 10 BCD digits to process
	plo	re
tobcdlp4:
	lda	rd		; get current cell
	str	r2		; save it
	ldn	rd		; get next cell
	shr			; shift bit 3 into df
	shr
	shr
	shr
	ldn	r2		; recover value for current cell
	shlc			; shift with new bit
	ani	00001111b	; keep only bottom 4 bits
	dec	rd		; point back
	str	rd		; store value
	inc	rd		; and move to next cell
	dec	re		; decrement count
	glo	re		; see if done
	lbnz	tobcdlp4	; jump if not
	pop	rd		; recover address
	dec	r9		; decrement bit count
	glo	r9		; see if done
	lbnz	tobcdlp2	; loop until done
;
	load	rd,uint32_buf
	ldi	UINT32_DIGITS
	plo	r8
	ldi	UINT32_DIGITS-1	; max 9 leading zeros
	phi	r8
loop1:	lda	rd
	lbz	uint32outz	; check leading zeros
	str	r2		; save for a moment
	ldi	0		; signal no more leading zeros
	phi	r8
	ldn	r2		; recover character
itoa2:	adi	'0'
	str	rf		; store into output buffer
	inc	rf
itoa3:	dec	r8
	glo	r8
	lbnz	loop1
	ldi	0		; place terminator in destination
	str	rf
	pop	r7
	pop	r8		; recover consumed registers
	pop	r9
	pop	rd
	retn			; return to caller

uint32outz:
	ghi	r8		; see if leading have been used up
	lbz	itoa2		; jump if so
	smi	1		; decrement count
	phi	r8
	lbr	itoa3		; and loop for next character
;
; ***************************************************
; ***** add32bits: r7:r8 = r7:r8 + ra:rb	*****
; ***************************************************
add32bits:
	glo	rb
	str	r2
	glo	r8
	add
	plo	r8
	ghi	rb
	str	r2
	ghi	r8
	adc
	phi	r8
	glo	ra
	str	r2
	glo	r7
	adc
	plo	r7
	ghi	ra
	str	r2
	ghi	r7
	adc
	phi	r7
	retn
;
; ===================================================
; === Based on David Madole's UART detect utility ===
; ===================================================
;
insSEQ	equ	7BH
insREQ	equ	7AH
insB1	equ	34H
insBN1	equ	3CH
;
UARTsetup:
	ghi	re
	ani	0feh
	lbz	realUART	; baud constant 0000000x: real UART
;
	xri	0feh
	lbz	realUART	; baud constant 1111111x: real UART
;
	load	rf,SoftTxHigh	; patch addresses in soft UART Tx
	load	rd,SoftTxLow
	load	rc,SoftTxStop
	ldi	insSEQ
	bq	QidlesHigh
QidlesLow:
	ldi	insREQ
QidlesHigh:
	str	rf		; Tx 1 bit
	str	rc		; Tx stop bit (high)
	xri	insREQ XOR insSEQ
	str	rd		; Tx 0 bit
	 if	INFO
	pushd
	call	O_INMSG
	db	'Soft UART',cr,lf,'Tx on Q (pin idles ',0
	popd
	xri	insREQ
	bnz	qlow
	call	O_INMSG
	db	'high)',cr,lf,0
	br	afterq
qlow:	call	O_INMSG
	db	'low)',cr,lf,0
afterq:
;
	call	O_INMSG
	db	'Rx on /EF',0
	 endi
	call	searchrx
	lbdf	unknownUART
;
	plo	re
	load	rf,SoftRxStart1	; patch addresses in soft UART Rx
	load	rd,SoftRxStart2
	load	rc,SoftRxBit1
	load	rb,SoftRxBit2
	glo	re
	str	rf
	str	rd
	xri	insB1 XOR insBN1 ; flip from Bx to BNx instruction
	str	rc		; or vice versa depending on idle
	str	rb		; state
	 if	INFO
	pushd
	ani	00000011b
	adi	'1'
	call	O_TYPE
	call	O_INMSG
	db	' (pin idles ',0
	popd
	ani	insB1 XOR insBN1
	bz	efIdlesHigh
	call	O_INMSG
	db	'low)',cr,lf,0
	retn
efIdlesHigh:
	call	O_INMSG
	db	'high)',cr,lf,0
	 endi
	retn
;
unknownUART:
	call	O_INMSG
	db	'Can',27h,'t figure out soft UART configuration',cr,lf,0
	lbr	Exit
;
realUART:
	load	rf,HardUARTlbr1	; with a real UART, we've got time
	load	rd,HardUARTlbr2	; to spare between sending the last
	ldi	high HardUARTlastChar
	str	rf		; character in the block and reading
	str	rd		; the ACK/NAK and (for block 0) the
	inc	rf		; following CRC/NAK
	inc	rd
	ldi	low HardUARTlastChar
	str	rf
	str	rd
	call	O_INMSG
	db	'Real UART',cr,lf,0
	retn
 
; Because the following code uses branch-on-EF instructions which
; are only available in short branch form, it is organized in a
; separate page of memory to ensure the branches do not end up
; crossing a page boundary unexpectedly.

	page

; The following lookup tables are used for decoding 1802 opcodes
; so we know how to skip literal data bytes and recognize the
; EF test instructions and those we will stop searching on. This
; needs to be at the start of a page due to how its indexed.
;
;	0 - One byte instruction
;	1 - Two byte instruction
;	2 - Three byte instruction
;	4 - Jump instruction
;	8 - SEP other than R4
; 16 - EF test instruction

opcodes:	db	0,0,0,low opcode3x,0,0,0,low opcode7x			; 0X-7X
		db	0,0,0,0,low opcodecx,low opcodedx,0,low opcodefx	; 8X-FX

opcode3x:	db	1,1,1,1,16,16,16,16,0,1,1,1,16,16,16,16	; 3X
opcode7x:	db	0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1		; 7X
opcodecx:	db	4,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0		; CX
opcodedx:	db	8,8,8,8,2,8,8,8,8,8,8,8,8,8,8,8		; DX
opcodefx:	db	0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1		; FX

;
; Determine the correct EF line by searching through the readkey
; subroutine code looking for the first Bx/BNx instruction. This
; tries to be intelligent by skipping literal bytes and only 
; looking at opcodes so it is not fooled by data. It also follows
; LBR opcodes but otherwise does a linear search. Stops at the 
; first SEP instruction it sees that is not SEP R4.
;
; D will be 0 if the EF line can't be determined, otherwise it will
; be the 1802 opcode that branches on an idle line condition.
;
searchrx:
	load	rf,O_READKEY

	ldi	high opcodes
	phi	rd

	sex	rd

	br	nextbyte

jumpins:
	inc	rf

	lda	rf		; make RF follow the LBR
	plo	re
	ldn	rf
	plo	rf
	glo	re
	phi	rf

	br	nextbyte

skip3ins:
	inc	rf
skip2ins:
	inc	rf
skip1ins:
	inc	rf

nextbyte:
	ldn	rf
	shr
	shr
	shr
	shr
	plo	rd

	ldn	rd
	bz	skip1ins

	ldn	rf
	ani	0fh
	or
	plo	rd

	ldn	rd			; 0
	bz	skip1ins

	shr				; 1
	bdf	skip2ins

	shr				; 2
	bdf	skip3ins

	shr				; 4
	bdf	jumpins

	shr				; 8 terminate on SEP other than
	bdf	notfound		; SEP 4

	ldn	rf			; 16
	ani	3
	plo	re
;
; Determine whether the EF line is inverted or not. This works by
; looking at the level when the line is idle. Basically it watches
; for the line to not change for a period of time and whatever 
; level it's at is assumed to be the idle state. Note that this
; code self-patches in the EF test instructions, kind of nasty but
; sometimes on the 1802 you do what you have to do. This means it
; can't go in ROM but if you are thinking about putting this in
; ROM something else is going wrong anyway!
;
	ldi	high bef
	phi	rd

	ldi	low bef
	plo	rd
	glo	re
	ori	34h
	str	rd

	ldi	low bnef
	plo	rd
	glo	re
	ori	3ch
	str	rd

negative:
	ldi	9
	plo	rf
	phi	rf

negloop:
	dec	rf
	ghi	rf
bef:
	b1	positive
	bnz	negloop

	ldi	low bnef
	plo	rd
	ldn	rd

	retn

positive:
	ldi	9
	plo	rf
	phi	rf
posloop:
	dec	rf
	ghi	rf
bnef:
	bn1	negative
	bnz	posloop

	ldi	low bef
	plo	rd
	ldn	rd
notfound:
	retn
; ===================================================
	 if	debug
;
; ***************************************************
; ***** Debug output routine			*****
; ***************************************************
TTYout:
	plo	re
	push	re
	push	rf
	push	rd
	load	rf,hexbuf
	ldi	0
	phi	rd
	glo	re
	plo	rd
	call	f_hexout2
	ldi	' '
	str	rf
	inc	rf
	ldi	0
	str	rf
	load	rf,hexbuf
	call	O_MSG
	load	rd,hexcount
	ldn	rd
	adi	1
	str	rd
	smi	16
	lbnz	NotEOL
	str	rd
	call	crlf
NotEOL:
	pop	rd
	pop	rf
	pop	re
	retn
hexbuf:	ds	4
hexcount:
	db	0
	retn
;
	 else
;
TTYout	equ	f_tty		; non debug output routine
;
	 endi
;
	page			; The CRC tables must be page aligned
;
crcTableLow:
	db	000h,021h,042h,063h,084h,0a5h,0c6h,0e7h
	db	008h,029h,04ah,06bh,08ch,0adh,0ceh,0efh
	db	031h,010h,073h,052h,0b5h,094h,0f7h,0d6h
	db	039h,018h,07bh,05ah,0bdh,09ch,0ffh,0deh
	db	062h,043h,020h,001h,0e6h,0c7h,0a4h,085h
	db	06ah,04bh,028h,009h,0eeh,0cfh,0ach,08dh
	db	053h,072h,011h,030h,0d7h,0f6h,095h,0b4h
	db	05bh,07ah,019h,038h,0dfh,0feh,09dh,0bch
	db	0c4h,0e5h,086h,0a7h,040h,061h,002h,023h
	db	0cch,0edh,08eh,0afh,048h,069h,00ah,02bh
	db	0f5h,0d4h,0b7h,096h,071h,050h,033h,012h
	db	0fdh,0dch,0bfh,09eh,079h,058h,03bh,01ah
	db	0a6h,087h,0e4h,0c5h,022h,003h,060h,041h
	db	0aeh,08fh,0ech,0cdh,02ah,00bh,068h,049h
	db	097h,0b6h,0d5h,0f4h,013h,032h,051h,070h
	db	09fh,0beh,0ddh,0fch,01bh,03ah,059h,078h
	db	088h,0a9h,0cah,0ebh,00ch,02dh,04eh,06fh
	db	080h,0a1h,0c2h,0e3h,004h,025h,046h,067h
	db	0b9h,098h,0fbh,0dah,03dh,01ch,07fh,05eh
	db	0b1h,090h,0f3h,0d2h,035h,014h,077h,056h
	db	0eah,0cbh,0a8h,089h,06eh,04fh,02ch,00dh
	db	0e2h,0c3h,0a0h,081h,066h,047h,024h,005h
	db	0dbh,0fah,099h,0b8h,05fh,07eh,01dh,03ch
	db	0d3h,0f2h,091h,0b0h,057h,076h,015h,034h
	db	04ch,06dh,00eh,02fh,0c8h,0e9h,08ah,0abh
	db	044h,065h,006h,027h,0c0h,0e1h,082h,0a3h
	db	07dh,05ch,03fh,01eh,0f9h,0d8h,0bbh,09ah
	db	075h,054h,037h,016h,0f1h,0d0h,0b3h,092h
	db	02eh,00fh,06ch,04dh,0aah,08bh,0e8h,0c9h
	db	026h,007h,064h,045h,0a2h,083h,0e0h,0c1h
	db	01fh,03eh,05dh,07ch,09bh,0bah,0d9h,0f8h
	db	017h,036h,055h,074h,093h,0b2h,0d1h,0f0h
;
crcTableHigh:
	db	000h,010h,020h,030h,040h,050h,060h,070h
	db	081h,091h,0a1h,0b1h,0c1h,0d1h,0e1h,0f1h
	db	012h,002h,032h,022h,052h,042h,072h,062h
	db	093h,083h,0b3h,0a3h,0d3h,0c3h,0f3h,0e3h
	db	024h,034h,004h,014h,064h,074h,044h,054h
	db	0a5h,0b5h,085h,095h,0e5h,0f5h,0c5h,0d5h
	db	036h,026h,016h,006h,076h,066h,056h,046h
	db	0b7h,0a7h,097h,087h,0f7h,0e7h,0d7h,0c7h
	db	048h,058h,068h,078h,008h,018h,028h,038h
	db	0c9h,0d9h,0e9h,0f9h,089h,099h,0a9h,0b9h
	db	05ah,04ah,07ah,06ah,01ah,00ah,03ah,02ah
	db	0dbh,0cbh,0fbh,0ebh,09bh,08bh,0bbh,0abh
	db	06ch,07ch,04ch,05ch,02ch,03ch,00ch,01ch
	db	0edh,0fdh,0cdh,0ddh,0adh,0bdh,08dh,09dh
	db	07eh,06eh,05eh,04eh,03eh,02eh,01eh,00eh
	db	0ffh,0efh,0dfh,0cfh,0bfh,0afh,09fh,08fh
	db	091h,081h,0b1h,0a1h,0d1h,0c1h,0f1h,0e1h
	db	010h,000h,030h,020h,050h,040h,070h,060h
	db	083h,093h,0a3h,0b3h,0c3h,0d3h,0e3h,0f3h
	db	002h,012h,022h,032h,042h,052h,062h,072h
	db	0b5h,0a5h,095h,085h,0f5h,0e5h,0d5h,0c5h
	db	034h,024h,014h,004h,074h,064h,054h,044h
	db	0a7h,0b7h,087h,097h,0e7h,0f7h,0c7h,0d7h
	db	026h,036h,006h,016h,066h,076h,046h,056h
	db	0d9h,0c9h,0f9h,0e9h,099h,089h,0b9h,0a9h
	db	058h,048h,078h,068h,018h,008h,038h,028h
	db	0cbh,0dbh,0ebh,0fbh,08bh,09bh,0abh,0bbh
	db	04ah,05ah,06ah,07ah,00ah,01ah,02ah,03ah
	db	0fdh,0edh,0ddh,0cdh,0bdh,0adh,09dh,08dh
	db	07ch,06ch,05ch,04ch,03ch,02ch,01ch,00ch
	db	0efh,0ffh,0cfh,0dfh,0afh,0bfh,08fh,09fh
	db	06eh,07eh,04eh,05eh,02eh,03eh,00eh,01eh
;
CmdDta:		ds	512
SndDta:		ds	512
uint32_buf:	ds	UINT32_DIGITS+1	
		ds	128
localStack:	ds	1
saveStack:	ds	2
;
cmdFilename:	ds	128
sndFilename:	ds	128
;
DirBuffer:	ds	512
DirEntBuffer:	ds	32
;
year:		ds	1
month:		ds	1
dom:		ds	1
hours:		ds	1
minutes:	ds	1
seconds:	ds	1
;
epoch:		ds	4
;
blkNum:		ds	1		; current block #
blkMode:	ds	1		; 0=checksum, 1=CRC
fileSize:	ds	4		; # bytes remaining in file
block0:		ds	128		; buffer for tx/rx
blockBuffer:	ds	1024		; 1k send data buffer
;
endrom	equ	$
;
	end
